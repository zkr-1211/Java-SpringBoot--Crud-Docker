version: "3.3"

services:
  # # docker容器启动的redis默认是没有redis.conf的配置文件，所以用docker启动redis之前，需要先去官网下载redis.conf的配置文件
  # redis: # 服务名称
  #     container_name: redis # 容器名称
  #     image: redis:latest
  #     # 配置redis.conf方式启动
  #     # command: redis-server /usr/local/etc/redis/redis.conf --requirepass 123456 --appendonly yes # 设置redis登录密码 123456、--appendonly yes：这个命令是用于开启redis数据持久化
  #     # 无需配置文件方式启动
  #     # command: redis-server --requirepass 123456 --appendonly yes # 设置redis登录密码 123456
  #     ports:
  #         - 6379:6379 # 本机端口:容器端口
  #     restart: on-failure # 自动重启
  #     # volumes:
  #     #     - ./deploy/redis/db:/data # 把持久化数据挂载到宿主机
  #     #     - ./deploy/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf  # 把redis的配置文件挂载到宿主机
  #     #     - ./deploy/redis/logs:/logs # 用来存放日志
  #     environment:
  #         - TZ=Asia/Shanghai  # 解决容器 时区的问题
  #     # networks:
  #     #     - my-server

  mysql:
    container_name: mysql
    image: mysql:8.0.22 # 使用官方镜像
    ports:
      - 3306:3306 # 本机端口:容器端口
    restart: always
    environment:
      # root 密码
      MYSQL_ROOT_PASSWORD: root
      # 初始化用户(不能是root 会报错, 后续需要给新用户赋予权限)
      MYSQL_USER: nacosdb
      # 用户密码
      MYSQL_PASSWORD: nacosdb
    volumes:
      - ./mysql/data:/var/lib/mysql # 用来存放了数据库表文件
      # - ./mysql/conf/my.cnf:/etc/my.cnf # 存放自定义的配置文件
      # 我们在启动MySQL容器时自动创建我们需要的数据库和表
      # mysql官方镜像中提供了容器启动时自动docker-entrypoint-initdb.d下的脚本的功能
      - ./mysql/init:/docker-entrypoint-initdb.d/ # 存放初始化的脚本
    # networks:
    #     - my-server

  service:
    # service服务
    build: .
    ports:
      - 8081:8081
    restart: on-failure # 设置自动重启，这一步必须设置，主要是存在mysql还没有启动完成就启动了node服务
    # networks:
    #     - my-server
    # depends_on: # node服务依赖于mysql和redis
    #     - redis
    #     - mysql

    # 声明一下网桥  my-server。
    # 重要：将所有服务都挂载在同一网桥即可通过容器名来互相通信了
    # 如连接mysql和redis，可以通过容器名来互相通信
    # networks:
    #     my-server:
